# This is a basic workflow to automate the creation of a Docker image
name: create_and_scan_image

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  APP: my-app
  REGION: us-east-1
  CLUSTER: ba-eks-cluster-crmg
  FOLDER: prisma_cloud_compute_edition

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.url.outputs.url }}
      console: ${{ steps.console.outputs.console }}
    steps:
      - uses: actions/checkout@v3
      - name: Read Environment Variables
        uses: tw3lveparsecs/github-actions-setvars@v0.1
        with:
          envFilePath: ./myvars.env
      - id: url
        run: echo "::set-output name=url::${{ env.URL }}"
      - id: console
        run: echo "::set-output name=console::${{ env.CONSOLE_ADDRESS }}"

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Run Terraform init
        run: terraform init

      - name: Terraform Apply
        id: terraform
        run: |
          terraform apply -auto-approve
          echo "::set-output name=repo::$(terraform output -raw ecr)"

      - name: Configure AWS CLI Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download twistcli
        run: |
          mkdir prisma_cloud_compute_edition

          echo "URL ${{ needs.setup.outputs.url }}"

          echo "----------------------------------------------------------------------"
          echo "Downloading twistcli"

          wget -O prisma_cloud_compute_edition.tar.gz -q https://cdn.twistlock.com/releases/K8ABPUqE/prisma_cloud_compute_edition_22_06_197.tar.gz --no-check-certificate
          # wget -O prisma_cloud_compute_edition.tar.gz -q ${{ needs.setup.outputs.url }} --no-check-certificate

          if [ $? == 0 ]
            then
              echo "----------------------------------------------------------------------"
              echo "Successfully downloaded twistcli."
              echo "----------------------------------------------------------------------"
              sleep 5
            else
              echo "----------------------------------------------------------------------"
              echo "Failed to download twistcli."
              echo "----------------------------------------------------------------------"
              exit 1
            fi

          tar xvzf prisma_cloud_compute_edition.tar.gz -C prisma_cloud_compute_edition/

      - name: Build Docker image
        run: |
          cd app/
          docker build -t ${{ steps.terraform.outputs.repo }}:${{ github.run_number }} .

      - name: Scan the image
        run: |
          cd prisma_cloud_compute_edition/
          ./linux/twistcli images scan --address ${{ env.CONSOLE_ADDRESS }} --user ${{ secrets.USER }} --password ${{ secrets.PASS }} --details ${{ steps.terraform.outputs.repo }}:${{ github.run_number }}

          if [ $? != 0 ]
          then
            exit 1
          fi
       
      # Retrieve an authentication token and authenticate the Docker client to the registry
      - name: Docker authentication
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.terraform.outputs.repo }}

      # Push Image to Registry
      - name: Push image to ECR
        run: docker push ${{ steps.terraform.outputs.repo }}:${{ github.run_number }}
